/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /Users/alexrozanski/Imperial/CS2/Labs/MAlice/malice/grammar/MAlice.g
 *     -                            On : 2012-11-22 15:59:57
 *     -                 for the lexer : MAliceLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
MAliceLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pMAliceLexer, which is returned from a call to MAliceLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pMAliceLexer are  as follows:
 *
 *  - 
 void
      pMAliceLexer->T__53(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__54(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__55(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__56(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__57(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__58(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__59(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__60(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__61(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__62(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__63(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__64(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__65(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__66(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__67(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__68(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__69(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->T__70(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->CHARACTER_LITERAL(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->STRING_LITERAL(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->NUMBER_LITERAL(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->WS(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->COMMENT(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->NEWLINE(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->LPAREN(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->RPAREN(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->OPENED(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->CLOSED(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->SPIDER(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->BUT(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->THELOOKINGGLASS(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->THEROOM(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->SPOKE(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->WASA(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->BECAME(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->ALICEFOUND(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->BECAUSE(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->SAIDALICE(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->COMMA(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->THEN(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->AND(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->FULL_STOP(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->CONTAINEDA(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->EVENTUALLY(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->ENOUGHTIMES(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->ALICEWASUNSURE(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->OR(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->SO(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->PIECE(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->WHATWAS(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->OF(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->TOO(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->MAYBE(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->PERHAPS(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->EITHER(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->HAD(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->QUESTION_MARK(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->ATE(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->DRANK(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->IDENTIFIER(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->PLUS(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->MINUS(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->TILDE(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->BANG(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->UNDERSCORE(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->LETTER(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->DIGIT(pMAliceLexer)
 *  - 
 void
      pMAliceLexer->Tokens(pMAliceLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_MAliceLexer_H
#define _MAliceLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct MAliceLexer_Ctx_struct MAliceLexer, * pMAliceLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
MAliceLexer

 */
struct MAliceLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__53)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__54)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__55)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__56)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__57)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__58)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__59)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__60)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__61)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__62)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__63)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__64)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__65)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__66)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__67)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__68)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__69)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mT__70)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mCHARACTER_LITERAL)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mSTRING_LITERAL)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mNUMBER_LITERAL)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mNEWLINE)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mLPAREN)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mRPAREN)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mOPENED)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mCLOSED)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mSPIDER)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mBUT)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mTHELOOKINGGLASS)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mTHEROOM)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mSPOKE)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mWASA)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mBECAME)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mALICEFOUND)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mBECAUSE)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mSAIDALICE)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mTHEN)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mFULL_STOP)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mCONTAINEDA)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mEVENTUALLY)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mENOUGHTIMES)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mALICEWASUNSURE)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mSO)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mPIECE)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mWHATWAS)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mOF)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mTOO)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mMAYBE)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mPERHAPS)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mEITHER)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mHAD)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mQUESTION_MARK)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mATE)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mDRANK)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mIDENTIFIER)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mTILDE)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mBANG)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mUNDERSCORE)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mLETTER)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mDIGIT)	(struct MAliceLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct MAliceLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct MAliceLexer_Ctx_struct * ctx);
    void	    (*free)   (struct MAliceLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pMAliceLexer MAliceLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pMAliceLexer MAliceLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__53      53
#define T__54      54
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define T__61      61
#define T__62      62
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define ALICEFOUND      4
#define ALICEWASUNSURE      5
#define AND      6
#define ATE      7
#define BANG      8
#define BECAME      9
#define BECAUSE      10
#define BUT      11
#define CHARACTER_LITERAL      12
#define CLOSED      13
#define COMMA      14
#define COMMENT      15
#define CONTAINEDA      16
#define DIGIT      17
#define DRANK      18
#define EITHER      19
#define ENOUGHTIMES      20
#define EVENTUALLY      21
#define FULL_STOP      22
#define HAD      23
#define IDENTIFIER      24
#define LETTER      25
#define LPAREN      26
#define MAYBE      27
#define MINUS      28
#define NEWLINE      29
#define NUMBER_LITERAL      30
#define OF      31
#define OPENED      32
#define OR      33
#define PERHAPS      34
#define PIECE      35
#define PLUS      36
#define QUESTION_MARK      37
#define RPAREN      38
#define SAIDALICE      39
#define SO      40
#define SPIDER      41
#define SPOKE      42
#define STRING_LITERAL      43
#define THELOOKINGGLASS      44
#define THEN      45
#define THEROOM      46
#define TILDE      47
#define TOO      48
#define UNDERSCORE      49
#define WASA      50
#define WHATWAS      51
#define WS      52
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for MAliceLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
