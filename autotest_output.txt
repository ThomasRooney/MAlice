Processing Valid File: ../malice_examples/valid/ackermann.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/binarySearch.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/bubbleSort.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/fibonacciIterative.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/fibonacciRecursive.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/gcdIterative.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/gcdRecursive.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/sieveOfEratosthenes.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test01.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test02.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test03.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test04.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test05.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test06.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test07.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test08.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test09.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test10.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test11.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test12.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test13.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test14.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/test15.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
Processing Valid File: ../malice_examples/valid/vectorFunctions.alice
---------------------
Reference Compiler Output:
---------------------
Usage: Main.py [options]

Options:
  --exe                Simulate generated 3-address code if compilation
                       successful.
  -c DIR, --clean=DIR  Clean generated files in <DIR>.
  -d INT, --debug=INT  Debug mode.
  -D DIR, --dir=DIR    Run compiler through MAlice tests located in <DIR>.
  -h, --help           Display this help message.
  -P, --parse          Only do parsing.
  -u, --udraw          Generate uDrawGraph files.
  -v, --verbose        Be verbose.
---------------------
Student Compiler Output:
---------------------
---------------------
