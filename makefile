CC=g++
ANTLR_SEARCH_PATHS=-I grammar/antlr/include -I grammar/antlr/libantlr3c
LEXER_SEARCH_PATH=-I grammar/output
CPP_FILES = MAliceASTWalker.cpp MAliceEntity.cpp MAliceSymbolTable.cpp
H_FILES = MAliceASTWalker.h MAliceEntity.h MAliceSymbolTable.h
OBJECTS = ${CPP_FILES:.cpp=.o}
ARGS=-std=c++0x



all: $(CPP_FILES) antlr malice 

# Main MAlice target
malice: $(CPP_FILES) $(H_FILES) malice_lexer malice_parser main.cpp
	$(CC) $(ARGS) $(ANTLR_SEARCH_PATHS) $(LEXER_SEARCH_PATH) $(H_FILES) MAliceASTWalker.cpp -o MAliceASTWalker.o
	$(CC) $(ARGS) $(ANTLR_SEARCH_PATHS) $(LEXER_SEARCH_PATH) $(H_FILES)  MAliceEntity.cpp -o MAliceEntity.o
	$(CC) $(ARGS) $(ANTLR_SEARCH_PATHS) $(LEXER_SEARCH_PATH) $(H_FILES)  MAliceSymbolTable.cpp -o MAliceSymbolTable.o
	$(CC) $(ARGS) $(ANTLR_SEARCH_PATHS) $(LEXER_SEARCH_PATH) $(H_FILES)  main.cpp MAliceLexer.o MAliceParser.o $(OBJECTS) grammar/antlr/libantlr3c/.libs/libantlr3c.a -o compile
	
%.o: %.cpp $(H_FILES)
	$(CC) -c -o $@ $<
# Building the lexer and parser generated by ANTLR
antlr: 
	sh ./configureantlr.sh

malice_lexer: antlr
	$(CC) $(ANTLR_SEARCH_PATHS) -c grammar/output/MAliceLexer.c

malice_parser: antlr
	$(CC) $(ANTLR_SEARCH_PATHS) -c grammar/output/MAliceParser.c



clean:
	@sh ./cleanantlr.sh
.PHONY: clean
